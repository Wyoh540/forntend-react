/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutFileImport } from './routes/_layout/file'
import { Route as LayoutAboutImport } from './routes/_layout/about'
import { Route as LayoutDatatableIndexImport } from './routes/_layout/datatable/index'
import { Route as LayoutComponentsCodeEditImport } from './routes/_layout/components/code-edit'
import { Route as LayoutComponentsChartsImport } from './routes/_layout/components/charts'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutFileRoute = LayoutFileImport.update({
  id: '/file',
  path: '/file',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAboutRoute = LayoutAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutDatatableIndexRoute = LayoutDatatableIndexImport.update({
  id: '/datatable/',
  path: '/datatable/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutComponentsCodeEditRoute = LayoutComponentsCodeEditImport.update({
  id: '/components/code-edit',
  path: '/components/code-edit',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutComponentsChartsRoute = LayoutComponentsChartsImport.update({
  id: '/components/charts',
  path: '/components/charts',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_layout/about': {
      id: '/_layout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof LayoutAboutImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/file': {
      id: '/_layout/file'
      path: '/file'
      fullPath: '/file'
      preLoaderRoute: typeof LayoutFileImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/components/charts': {
      id: '/_layout/components/charts'
      path: '/components/charts'
      fullPath: '/components/charts'
      preLoaderRoute: typeof LayoutComponentsChartsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/components/code-edit': {
      id: '/_layout/components/code-edit'
      path: '/components/code-edit'
      fullPath: '/components/code-edit'
      preLoaderRoute: typeof LayoutComponentsCodeEditImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/datatable/': {
      id: '/_layout/datatable/'
      path: '/datatable'
      fullPath: '/datatable'
      preLoaderRoute: typeof LayoutDatatableIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutAboutRoute: typeof LayoutAboutRoute
  LayoutFileRoute: typeof LayoutFileRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutComponentsChartsRoute: typeof LayoutComponentsChartsRoute
  LayoutComponentsCodeEditRoute: typeof LayoutComponentsCodeEditRoute
  LayoutDatatableIndexRoute: typeof LayoutDatatableIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAboutRoute: LayoutAboutRoute,
  LayoutFileRoute: LayoutFileRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutComponentsChartsRoute: LayoutComponentsChartsRoute,
  LayoutComponentsCodeEditRoute: LayoutComponentsCodeEditRoute,
  LayoutDatatableIndexRoute: LayoutDatatableIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/about': typeof LayoutAboutRoute
  '/file': typeof LayoutFileRoute
  '/': typeof LayoutIndexRoute
  '/components/charts': typeof LayoutComponentsChartsRoute
  '/components/code-edit': typeof LayoutComponentsCodeEditRoute
  '/datatable': typeof LayoutDatatableIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/about': typeof LayoutAboutRoute
  '/file': typeof LayoutFileRoute
  '/': typeof LayoutIndexRoute
  '/components/charts': typeof LayoutComponentsChartsRoute
  '/components/code-edit': typeof LayoutComponentsCodeEditRoute
  '/datatable': typeof LayoutDatatableIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_layout/about': typeof LayoutAboutRoute
  '/_layout/file': typeof LayoutFileRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/components/charts': typeof LayoutComponentsChartsRoute
  '/_layout/components/code-edit': typeof LayoutComponentsCodeEditRoute
  '/_layout/datatable/': typeof LayoutDatatableIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/about'
    | '/file'
    | '/'
    | '/components/charts'
    | '/components/code-edit'
    | '/datatable'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/about'
    | '/file'
    | '/'
    | '/components/charts'
    | '/components/code-edit'
    | '/datatable'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/_layout/about'
    | '/_layout/file'
    | '/_layout/'
    | '/_layout/components/charts'
    | '/_layout/components/code-edit'
    | '/_layout/datatable/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/login"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/about",
        "/_layout/file",
        "/_layout/",
        "/_layout/components/charts",
        "/_layout/components/code-edit",
        "/_layout/datatable/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_layout/about": {
      "filePath": "_layout/about.tsx",
      "parent": "/_layout"
    },
    "/_layout/file": {
      "filePath": "_layout/file.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/components/charts": {
      "filePath": "_layout/components/charts.tsx",
      "parent": "/_layout"
    },
    "/_layout/components/code-edit": {
      "filePath": "_layout/components/code-edit.tsx",
      "parent": "/_layout"
    },
    "/_layout/datatable/": {
      "filePath": "_layout/datatable/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
